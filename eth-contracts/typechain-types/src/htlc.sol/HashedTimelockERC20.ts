/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface HashedTimelockERC20Interface extends Interface {
  getFunction(
    nameOrSignature: "getContract" | "newContract" | "refund" | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HTLCERC20New"
      | "HTLCERC20Refund"
      | "HTLCERC20Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getContract",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newContract",
    values: [AddressLike, BytesLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace HTLCERC20NewEvent {
  export type InputTuple = [
    contractId: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    tokenContract: AddressLike,
    amount: BigNumberish,
    hashlock: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    contractId: string,
    sender: string,
    receiver: string,
    tokenContract: string,
    amount: bigint,
    hashlock: string,
    timelock: bigint
  ];
  export interface OutputObject {
    contractId: string;
    sender: string;
    receiver: string;
    tokenContract: string;
    amount: bigint;
    hashlock: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCERC20RefundEvent {
  export type InputTuple = [contractId: BytesLike];
  export type OutputTuple = [contractId: string];
  export interface OutputObject {
    contractId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCERC20WithdrawEvent {
  export type InputTuple = [contractId: BytesLike];
  export type OutputTuple = [contractId: string];
  export interface OutputObject {
    contractId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HashedTimelockERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): HashedTimelockERC20;
  waitForDeployment(): Promise<this>;

  interface: HashedTimelockERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getContract: TypedContractMethod<
    [_contractId: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        sender: string;
        receiver: string;
        tokenContract: string;
        amount: bigint;
        hashlock: string;
        timelock: bigint;
        withdrawn: boolean;
        refunded: boolean;
        preimage: string;
      }
    ],
    "view"
  >;

  newContract: TypedContractMethod<
    [
      _receiver: AddressLike,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _tokenContract: AddressLike,
      _amount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  refund: TypedContractMethod<
    [_contractId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [_contractId: BytesLike, _preimage: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getContract"
  ): TypedContractMethod<
    [_contractId: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        boolean,
        boolean,
        string
      ] & {
        sender: string;
        receiver: string;
        tokenContract: string;
        amount: bigint;
        hashlock: string;
        timelock: bigint;
        withdrawn: boolean;
        refunded: boolean;
        preimage: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "newContract"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _tokenContract: AddressLike,
      _amount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_contractId: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_contractId: BytesLike, _preimage: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "HTLCERC20New"
  ): TypedContractEvent<
    HTLCERC20NewEvent.InputTuple,
    HTLCERC20NewEvent.OutputTuple,
    HTLCERC20NewEvent.OutputObject
  >;
  getEvent(
    key: "HTLCERC20Refund"
  ): TypedContractEvent<
    HTLCERC20RefundEvent.InputTuple,
    HTLCERC20RefundEvent.OutputTuple,
    HTLCERC20RefundEvent.OutputObject
  >;
  getEvent(
    key: "HTLCERC20Withdraw"
  ): TypedContractEvent<
    HTLCERC20WithdrawEvent.InputTuple,
    HTLCERC20WithdrawEvent.OutputTuple,
    HTLCERC20WithdrawEvent.OutputObject
  >;

  filters: {
    "HTLCERC20New(bytes32,address,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      HTLCERC20NewEvent.InputTuple,
      HTLCERC20NewEvent.OutputTuple,
      HTLCERC20NewEvent.OutputObject
    >;
    HTLCERC20New: TypedContractEvent<
      HTLCERC20NewEvent.InputTuple,
      HTLCERC20NewEvent.OutputTuple,
      HTLCERC20NewEvent.OutputObject
    >;

    "HTLCERC20Refund(bytes32)": TypedContractEvent<
      HTLCERC20RefundEvent.InputTuple,
      HTLCERC20RefundEvent.OutputTuple,
      HTLCERC20RefundEvent.OutputObject
    >;
    HTLCERC20Refund: TypedContractEvent<
      HTLCERC20RefundEvent.InputTuple,
      HTLCERC20RefundEvent.OutputTuple,
      HTLCERC20RefundEvent.OutputObject
    >;

    "HTLCERC20Withdraw(bytes32)": TypedContractEvent<
      HTLCERC20WithdrawEvent.InputTuple,
      HTLCERC20WithdrawEvent.OutputTuple,
      HTLCERC20WithdrawEvent.OutputObject
    >;
    HTLCERC20Withdraw: TypedContractEvent<
      HTLCERC20WithdrawEvent.InputTuple,
      HTLCERC20WithdrawEvent.OutputTuple,
      HTLCERC20WithdrawEvent.OutputObject
    >;
  };
}
